// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  CONTENT_CREATOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(CONTENT_CREATOR)
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  auditLogs     AuditLog[]
  performedAudits AuditLog[] @relation("PerformedBy")

  // CMS Relations
  articles      Article[]
  articleRevisions ArticleRevision[]
  articleComments ArticleComment[]
  createdCategories Category[] @relation("CategoryCreator")
  createdTags   Tag[] @relation("TagCreator")
  uploadedFiles MediaFile[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  WON
  LOST
  NURTURING
}

model Lead {
  id           String     @id @default(cuid())
  fullName     String
  email        String
  phone        String?
  organization String?
  eventType    String?
  budget       String?
  goals        String?
  isUrgent     Boolean    @default(false)
  status       LeadStatus @default(NEW)
  source       String     @default("contact_form")
  notes        String?
  assignedTo   String?

  // Tracking fields
  ipAddress    String?
  userAgent    String?
  referrer     String?
  utm_source   String?
  utm_medium   String?
  utm_campaign String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leads")
}

enum AuditAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ACTIVATED
  USER_DEACTIVATED
  ROLE_CHANGED
  PASSWORD_CHANGED
  LOGIN_ATTEMPT
  BULK_UPDATE
  // CMS Actions
  ARTICLE_CREATED
  ARTICLE_UPDATED
  ARTICLE_PUBLISHED
  ARTICLE_ARCHIVED
  ARTICLE_STATUS_CHANGED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  TAG_CREATED
  TAG_UPDATED
  TAG_DELETED
  BULK_ARTICLE_UPDATE
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String
  action      AuditAction
  details     Json?
  performedBy String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  performer   User        @relation("PerformedBy", fields: [performedBy], references: [id])

  @@map("audit_logs")
}

// =============================================================================
// CMS MODELS
// =============================================================================

enum ArticleStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum ArticleType {
  BLOG_POST
  NEWS
  CASE_STUDY
  SERVICE_PAGE
  LANDING_PAGE
  ANNOUNCEMENT
}

enum PublishScheduleType {
  IMMEDIATE
  SCHEDULED
  MANUAL
}

model Article {
  id                String    @id @default(cuid())

  // Basic Information
  title             String
  slug              String    @unique
  excerpt           String?   @db.Text
  content           String    @db.Text

  // Multi-language Support
  locale            String    @default("en")
  translations      ArticleTranslation[]

  // Status & Workflow
  status            ArticleStatus @default(DRAFT)
  type              ArticleType   @default(BLOG_POST)

  // Publishing
  publishScheduleType PublishScheduleType @default(MANUAL)
  publishedAt       DateTime?
  scheduledAt       DateTime?

  // SEO & Metadata
  metaTitle         String?
  metaDescription   String?   @db.Text
  metaKeywords      String?
  ogTitle           String?
  ogDescription     String?   @db.Text
  ogImage           String?
  twitterTitle      String?
  twitterDescription String?  @db.Text
  twitterImage      String?
  canonicalUrl      String?

  // Content Settings
  allowComments     Boolean   @default(true)
  isFeatured        Boolean   @default(false)
  isPinned          Boolean   @default(false)
  readingTime       Int?      // in minutes

  // Relationships
  authorId          String
  author            User      @relation(fields: [authorId], references: [id])

  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])

  tags              ArticleTag[]
  revisions         ArticleRevision[]
  comments          ArticleComment[]
  analytics         ArticleAnalytics[]

  // Images & Media
  featuredImage     String?
  featuredImageAlt  String?
  gallery           String[]  // Array of image URLs

  // Advanced Features
  template          String?   // Custom template for rendering
  customCss         String?   @db.Text
  customJs          String?   @db.Text
  structuredData    Json?     // Schema.org JSON-LD

  // Tracking
  viewCount         Int       @default(0)
  shareCount        Int       @default(0)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([status, publishedAt])
  @@index([locale, status])
  @@index([authorId, status])
  @@index([categoryId])
  @@index([slug])
  @@map("articles")
}

model ArticleTranslation {
  id              String  @id @default(cuid())
  articleId       String
  locale          String
  title           String
  slug            String
  excerpt         String? @db.Text
  content         String  @db.Text
  metaTitle       String?
  metaDescription String? @db.Text

  article         Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([articleId, locale])
  @@unique([locale, slug])
  @@map("article_translations")
}

model ArticleRevision {
  id            String   @id @default(cuid())
  articleId     String
  version       Int
  title         String
  content       String   @db.Text
  excerpt       String?  @db.Text
  changeLog     String?  @db.Text

  createdById   String
  createdBy     User     @relation(fields: [createdById], references: [id])
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())

  @@unique([articleId, version])
  @@index([articleId, createdAt])
  @@map("article_revisions")
}

model Category {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?   @db.Text
  image         String?
  color         String?   // Hex color for UI

  // Hierarchy
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")

  // SEO
  metaTitle     String?
  metaDescription String? @db.Text

  // Multi-language
  locale        String    @default("en")
  translations  CategoryTranslation[]

  // Settings
  isActive      Boolean   @default(true)
  sortOrder     Int       @default(0)

  // Relationships
  articles      Article[]

  // Tracking
  createdById   String
  createdBy     User      @relation("CategoryCreator", fields: [createdById], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([isActive, sortOrder])
  @@index([parentId])
  @@map("categories")
}

model CategoryTranslation {
  id           String   @id @default(cuid())
  categoryId   String
  locale       String
  name         String
  slug         String
  description  String?  @db.Text

  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([categoryId, locale])
  @@unique([locale, slug])
  @@map("category_translations")
}

model Tag {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?  @db.Text
  color        String?  // Hex color for UI

  // Multi-language
  locale       String   @default("en")
  translations TagTranslation[]

  // Settings
  isActive     Boolean  @default(true)

  // Relationships
  articles     ArticleTag[]

  // Tracking
  usageCount   Int      @default(0)
  createdById  String
  createdBy    User     @relation("TagCreator", fields: [createdById], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([isActive, usageCount])
  @@map("tags")
}

model TagTranslation {
  id          String @id @default(cuid())
  tagId       String
  locale      String
  name        String
  slug        String
  description String? @db.Text

  tag         Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tagId, locale])
  @@unique([locale, slug])
  @@map("tag_translations")
}

model ArticleTag {
  id        String  @id @default(cuid())
  articleId String
  tagId     String

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([articleId, tagId])
  @@map("article_tags")
}

model ArticleComment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  isApproved  Boolean  @default(false)

  // Hierarchy for replies
  parentId    String?
  parent      ArticleComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     ArticleComment[] @relation("CommentReplies")

  // Relationships
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])

  // Guest comment fields
  guestName   String?
  guestEmail  String?
  guestWebsite String?

  // Tracking
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([articleId, isApproved])
  @@index([parentId])
  @@map("article_comments")
}

model ArticleAnalytics {
  id            String   @id @default(cuid())
  articleId     String
  date          DateTime @db.Date

  // Metrics
  views         Int      @default(0)
  uniqueViews   Int      @default(0)
  shares        Int      @default(0)
  comments      Int      @default(0)
  timeOnPage    Int      @default(0) // in seconds
  bounceRate    Float    @default(0)

  // Traffic Sources
  organicViews  Int      @default(0)
  socialViews   Int      @default(0)
  referralViews Int      @default(0)
  directViews   Int      @default(0)

  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([articleId, date])
  @@index([date])
  @@map("article_analytics")
}

model MediaFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int      // in bytes
  url          String

  // Image specific
  width        Int?
  height       Int?
  altText      String?

  // File organization
  folder       String?
  tags         String[] // Array of tags for organization

  // SEO
  title        String?
  description  String?  @db.Text

  // Usage tracking
  usageCount   Int      @default(0)

  // Upload info
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([mimeType])
  @@index([uploadedById])
  @@map("media_files")
}

