// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  CONTENT_CREATOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(CONTENT_CREATOR)
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  auditLogs     AuditLog[]
  performedAudits AuditLog[] @relation("PerformedBy")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  WON
  LOST
  NURTURING
}

model Lead {
  id           String     @id @default(cuid())
  fullName     String
  email        String
  phone        String?
  organization String?
  eventType    String?
  budget       String?
  goals        String?
  isUrgent     Boolean    @default(false)
  status       LeadStatus @default(NEW)
  source       String     @default("contact_form")
  notes        String?
  assignedTo   String?

  // Tracking fields
  ipAddress    String?
  userAgent    String?
  referrer     String?
  utm_source   String?
  utm_medium   String?
  utm_campaign String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leads")
}

enum AuditAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ACTIVATED
  USER_DEACTIVATED
  ROLE_CHANGED
  PASSWORD_CHANGED
  LOGIN_ATTEMPT
  BULK_UPDATE
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String
  action      AuditAction
  details     Json?
  performedBy String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  performer   User        @relation("PerformedBy", fields: [performedBy], references: [id])

  @@map("audit_logs")
}